package main

import "testing"

type Sample struct {
	UEvent UEvent
	Raw    []byte
	Valid  bool
}

type testingWrapper struct {
	*testing.T
}

func (t *testingWrapper) FatalfIf(cond bool, msg string, args ...interface{}) {
	if cond {
		if len(args) == 0 {
			t.Fatal(msg)
		}
		t.Fatalf(msg, args)
	}
}

func TestParseUEvent(testing *testing.T) {

	t := testingWrapper{testing}

	samples := []Sample{
		Sample{
			UEvent: UEvent{
				Action: ADD,
				KObj:   "/devices/pci0000:00/0000:00:14.0/usb2/2-1/2-1:1.2/0003:04F2:0976.0008/hidraw/hidraw4",
				Env: map[string]string{
					"ACTION":    "add",
					"DEVPATH":   "/devices/pci0000:00/0000:00:14.0/usb2/2-1/2-1:1.2/0003:04F2:0976.0008/hidraw/hidraw4",
					"SUBSYSTEM": "hidraw",
					"MAJOR":     "247",
					"MINOR":     "4",
					"DEVNAME":   "hidraw4",
					"SEQNUM":    "2569",
				},
			},
			// add@/devices/pci0000:00/0000:00:14.0/usb2/2-1/2-1:1.2/0003:04F2:0976.0008/hidraw/hidraw4ACTION=addDEVPATH=/devices/pci0000:00/0000:00:14.0/usb2/2-1/2-1:1.2/0003:04F2:0976.0008/hidraw/hidraw4SUBSYSTEM=hidrawMAJOR=247MINOR=4DEVNAME=hidraw4SEQNUM=2569
			Raw:   []byte{0x61, 0x64, 0x64, 0x40, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x63, 0x69, 0x30, 0x30, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x2f, 0x30, 0x30, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x31, 0x34, 0x2e, 0x30, 0x2f, 0x75, 0x73, 0x62, 0x32, 0x2f, 0x32, 0x2d, 0x31, 0x2f, 0x32, 0x2d, 0x31, 0x3a, 0x31, 0x2e, 0x32, 0x2f, 0x30, 0x30, 0x30, 0x33, 0x3a, 0x30, 0x34, 0x46, 0x32, 0x3a, 0x30, 0x39, 0x37, 0x36, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x2f, 0x68, 0x69, 0x64, 0x72, 0x61, 0x77, 0x2f, 0x68, 0x69, 0x64, 0x72, 0x61, 0x77, 0x34, 0x0, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x3d, 0x61, 0x64, 0x64, 0x0, 0x44, 0x45, 0x56, 0x50, 0x41, 0x54, 0x48, 0x3d, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x63, 0x69, 0x30, 0x30, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x2f, 0x30, 0x30, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x31, 0x34, 0x2e, 0x30, 0x2f, 0x75, 0x73, 0x62, 0x32, 0x2f, 0x32, 0x2d, 0x31, 0x2f, 0x32, 0x2d, 0x31, 0x3a, 0x31, 0x2e, 0x32, 0x2f, 0x30, 0x30, 0x30, 0x33, 0x3a, 0x30, 0x34, 0x46, 0x32, 0x3a, 0x30, 0x39, 0x37, 0x36, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x2f, 0x68, 0x69, 0x64, 0x72, 0x61, 0x77, 0x2f, 0x68, 0x69, 0x64, 0x72, 0x61, 0x77, 0x34, 0x0, 0x53, 0x55, 0x42, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x3d, 0x68, 0x69, 0x64, 0x72, 0x61, 0x77, 0x0, 0x4d, 0x41, 0x4a, 0x4f, 0x52, 0x3d, 0x32, 0x34, 0x37, 0x0, 0x4d, 0x49, 0x4e, 0x4f, 0x52, 0x3d, 0x34, 0x0, 0x44, 0x45, 0x56, 0x4e, 0x41, 0x4d, 0x45, 0x3d, 0x68, 0x69, 0x64, 0x72, 0x61, 0x77, 0x34, 0x0, 0x53, 0x45, 0x51, 0x4e, 0x55, 0x4d, 0x3d, 0x32, 0x35, 0x36, 0x39, 0x0},
			Valid: true,
		},
	}

	for _, sample := range samples {
		uevent, err := ParseUEvent(sample.Raw)

		if sample.Valid {
			t.FatalfIf(err != nil || uevent == nil, "Unable to parse real uevent")
			t.FatalfIf(uevent.Action != sample.UEvent.Action, "Wrong action (got: %s, wanted: %s)", uevent.Action.String(), ADD.String())
			t.FatalfIf(uevent.KObj != sample.UEvent.KObj, "Wrong action (got: %s, wanted: %s)", uevent.KObj, sample.UEvent.KObj)
		}

		var found bool
		for k, v := range sample.UEvent.Env {
			found = false
			for i, e := range uevent.Env {
				if i == k && v == e {
					found = true
				}
			}
			t.FatalfIf(sample.Valid && !found, "Unable to find %s=%s env var from uevent", k, v)
		}

		t.FatalfIf(!sample.Valid, "Event parsed successfully but it should be invalid")
	}
}
